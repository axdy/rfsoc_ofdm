-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/OFDM_Rx_HW/ofdm_rx_src_Frame_Detection.vhd
-- Created: 2023-10-17 14:31:33
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ofdm_rx_src_Frame_Detection
-- Source Path: OFDM_Rx_HW/OFDMRx/Synchronisation/FrameDetect/Frame Detection Valid Gen/Frame Detection
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ofdm_rx_src_Frame_Detection IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_12_0                        :   IN    std_logic;
        enable                            :   IN    std_logic;
        frameDet                          :   OUT   std_logic
        );
END ofdm_rx_src_Frame_Detection;


ARCHITECTURE rtl OF ofdm_rx_src_Frame_Detection IS

  -- Signals
  SIGNAL state                            : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL reg_enable                       : std_logic;
  SIGNAL count                            : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL state_next                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL reg_enable_next                  : std_logic;
  SIGNAL count_next                       : unsigned(13 DOWNTO 0);  -- ufix14

BEGIN
  Frame_Detection_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      state <= to_unsigned(16#0#, 3);
      reg_enable <= '0';
      count <= to_unsigned(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        state <= state_next;
        reg_enable <= reg_enable_next;
        count <= count_next;
      END IF;
    END IF;
  END PROCESS Frame_Detection_process;

  Frame_Detection_output : PROCESS (count, enable, reg_enable, state)
  BEGIN
    state_next <= state;
    count_next <= count;
    -- Constants
    -- Can vary depending on transmitter.
    -- Do not change
    -- States
    -- Default Outputs
    frameDet <= '0';
    -- State table
    CASE state IS
      WHEN "000" =>
        -- Waits for frame detection
        IF (enable AND ( NOT reg_enable)) = '1' THEN 
          state_next <= to_unsigned(16#1#, 3);
          count_next <= to_unsigned(16#0000#, 14);
        END IF;
      WHEN "001" =>
        -- Frame detected true for OFDM_FRAMES_SAMPLES
        IF count < to_unsigned(16#2830#, 14) THEN 
          count_next <= count + to_unsigned(16#0001#, 14);
          frameDet <= '1';
        ELSE 
          count_next <= to_unsigned(16#0000#, 14);
          state_next <= to_unsigned(16#0#, 3);
        END IF;
      WHEN OTHERS => 
        NULL;
    END CASE;
    -- Update registers
    reg_enable_next <= enable;
  END PROCESS Frame_Detection_output;


END rtl;

